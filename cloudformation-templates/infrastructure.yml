AWSTemplateFormatVersion: '2010-09-09'
Description: INF3701 Infrastructure as Code Intro

Parameters:
  CidrVpc:
    Type: String
    Default: "172.20.0.0/21"
  CidrSubnetPublicA:
    Type: String
    Default: "172.20.1.0/24"
  CidrSubnetPublicB:
    Type: String
    Default: "172.20.2.0/24"
  CidrSubnetPublicC:
    Type: String
    Default: "172.20.3.0/24"
  CidrSubnetPrivateA:
    Type: String
    Default: "172.20.4.0/24"
  CidrSubnetPrivateB:
    Type: String
    Default: "172.20.5.0/24"
  CidrSubnetPrivateC:
    Type: String
    Default: "172.20.6.0/24"
  Ami:
    Description: AWS public ssm parameter path containing the AMI ID
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs
  AvailabilityZone1:
    Type: String
    Default: us-east-1a
  AvailabilityZone2:
    Type: String
    Default: us-east-1b
  AvailabilityZone3:
    Type: String
    Default: us-east-1c

Resources:

  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref CidrVpc
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Test VPC

  SubnetPublicA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref CidrSubnetPublicA
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: SubnetPublicA

  SubnetPublicB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref CidrSubnetPublicB
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: SubnetPublicB

  SubnetPublicC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref CidrSubnetPublicC
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: SubnetPublicC

  SubnetPrivateA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: !Ref CidrSubnetPrivateA
      MapPublicIpOnLaunch: false
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: SubnetPrivateA

  SubnetPrivateB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: !Ref CidrSubnetPrivateB
      MapPublicIpOnLaunch: false
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: SubnetPrivateA

  SubnetPrivateC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref AvailabilityZone3
      CidrBlock: !Ref CidrSubnetPrivateC
      MapPublicIpOnLaunch: false
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: SubnetPrivateC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayVpcAttachemnt:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !GetAtt InternetGateway.InternetGatewayId
      VpcId: !Ref Vpc

  NATGatewayEIPA:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  NatGatewayA:
    DependsOn: RouteInternetGateway
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATGatewayEIPA.AllocationId
      ConnectivityType: public
      SubnetId: !Ref SubnetPublicA

  NATGatewayEIPB:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  NatGatewayB:
    DependsOn: RouteInternetGateway
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATGatewayEIPB.AllocationId
      ConnectivityType: public
      SubnetId: !Ref SubnetPublicB

  NATGatewayEIPC:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  NatGatewayC:
    DependsOn: RouteInternetGateway
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATGatewayEIPC.AllocationId
      ConnectivityType: public
      SubnetId: !Ref SubnetPublicC

  RouteTablePublicAll:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: RouteTablePublicAll

  RouteTablePrivateA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: RouteTablePrivateA

  RouteTablePrivateB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: RouteTablePrivateB

  RouteTablePrivateC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: RouteTablePrivateC

  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublicAll
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !GetAtt InternetGateway.InternetGatewayId

  RouteNATGatewayA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivateA
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA

  RouteNATGatewayB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivateB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayB

  RouteNATGatewayC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivateC
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayC

  SubnetRouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePublicAll
      SubnetId: !Ref SubnetPublicA

  SubnetRouteTableAssociationPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePublicAll
      SubnetId: !Ref SubnetPublicB

  SubnetRouteTableAssociationPublicC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePublicAll
      SubnetId: !Ref SubnetPublicC

  SubnetRouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePrivateA
      SubnetId: !Ref SubnetPrivateA

  SubnetRouteTableAssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePrivateC
      SubnetId: !Ref SubnetPrivateB

  SubnetRouteTableAssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTablePrivateC
      SubnetId: !Ref SubnetPrivateC

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: PublicLoadBalancerSecurityGroup
      SecurityGroupIngress: 
        -   CidrIp: '0.0.0.0/0'
            Description: PublicLoadBalancerIngressPort80
            FromPort: 80
            IpProtocol: TCP
            ToPort: 80
      VpcId: !Ref Vpc

  WorkloadSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: WorkloadSecurityGroup
      VpcId:  !Ref Vpc

  WorkloadSecurityGroupIngressRuleHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: WorkloadSecurityGroupIngressRuleHttp
      FromPort: 80
      GroupId: !Ref WorkloadSecurityGroup
      IpProtocol: TCP
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
      ToPort: 80

  PublicLoadBalancerSecurityEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      Description: PublicLoadbanancerSecuityGroupEgressRule
      FromPort: 80
      GroupId: !Ref PublicLoadBalancerSecurityGroup
      IpProtocol: TCP
      DestinationSecurityGroupId: !Ref WorkloadSecurityGroup
      ToPort: 80

  WorkloadKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: WorkloadKeyPair

  WorkloadAppInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ami
      InstanceType: t3.nano
      KeyName: !Ref WorkloadKeyPair
      SecurityGroupIds:
        - !Ref WorkloadSecurityGroup
      SubnetId: !Ref SubnetPrivateA
      Tags:
           - Key: Name
             Value: WorkloadAppInstance1
      UserData: !Base64 |
        #!/bin/bash
        INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
        AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
        IPV4=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
        DATE=$(date)
        yum update -y
        amazon-linux-extras install nginx1 -y
        systemctl start nginx
        systemctl enable nginx
        echo -e "<html><head><title>INFS3701 demo IAC</title></head><style>html { color-scheme: light dark; } body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; }</style><body><h1>Hello!</h1><p>INSTANCE_ID: $INSTANCE_ID></p><p>AZ: $AZ></p><p>IPV4: $IPV4></p></body></html>" > /var/www/html/index.html

  WorkloadAppInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ami
      InstanceType: t3.nano
      KeyName: !Ref WorkloadKeyPair
      SecurityGroupIds:
        - !Ref WorkloadSecurityGroup
      SubnetId: !Ref SubnetPrivateB
      Tags:
           - Key: Name
             Value: WorkloadAppInstance2
      UserData: !Base64 |
        #!/bin/bash
        INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
        AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
        IPV4=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
        DATE=$(date)
        yum update -y
        yum install -y nginx
        systemctl start nginx
        systemctl enable nginx
        echo "<html><body><h1>Hello!</h1><p>INSTANCE_ID: $INSTANCE_ID></p><p>AZ: $AZ></p><p>IPV4: $IPV4></p></body></html>" > /var/www/html/index.html

  WorkloadAppInstance3:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ami
      InstanceType: t3.nano
      KeyName: !Ref WorkloadKeyPair
      SecurityGroupIds:
        - !Ref WorkloadSecurityGroup
      SubnetId: !Ref SubnetPrivateC
      Tags:
           - Key: Name
             Value: WorkloadAppInstance3
      UserData: !Base64 |
        #!/bin/bash
        INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
        AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
        IPV4=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
        DATE=$(date)
        yum update -y
        yum install -y nginx
        systemctl start nginx
        systemctl enable nginx
        echo "<html><body><h1>Hello!</h1><p>INSTANCE_ID: $INSTANCE_ID></p><p>AZ: $AZ></p><p>IPV4: $IPV4></p></body></html>" > /var/www/html/index.html

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
        - !Ref SubnetPublicC
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: "60"
        - Key: deletion_protection.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: true
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: false

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref Vpc
      Port: 80
      Protocol: HTTP
      HealthCheckPath: '/'
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      UnhealthyThresholdCount: 3
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      TargetType: instance
      Targets:
        - Id: !Ref WorkloadAppInstance1
          Port: 80
        - Id: !Ref WorkloadAppInstance2
          Port: 80
        - Id: !Ref WorkloadAppInstance3
          Port: 80

  ApplicationLoadBalancerHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Order: 1
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
                Weight: "100"
          Type: forward

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: BastionHostSecurityGroup
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          Description: BastionHostIngressPort22
          FromPort: 22
          IpProtocol: TCP
          ToPort: 22
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          DestinationSecurityGroupId: !Ref WorkloadSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

      VpcId: !Ref Vpc

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ami
      InstanceType: t3.nano
      KeyName: !Ref WorkloadKeyPair
      SecurityGroupIds:
        - !Ref BastionHostSecurityGroup
      SubnetId: !Ref SubnetPublicA
      Tags:
           - Key: Name
             Value: BastionHostAzA
      UserData: !Base64 |
        #!/bin/bash
        yum update -y

  WorkloadSecurityGroupIngressRuleBastionSsh:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      Description: WorkloadSecurityGroupIngressRuleBastionSsh
      FromPort: 22
      GroupId: !Ref WorkloadSecurityGroup
      IpProtocol: TCP
      SourceSecurityGroupId: !Ref BastionHostSecurityGroup
      ToPort: 22


Outputs:
  WorkloadKeyPairId:
    Description: KeyPairId
    Value: !GetAtt  WorkloadKeyPair.KeyPairId

  BastionHostPublicIp:
    Description: IP address of bastion host
    Value: !GetAtt BastionHost.PublicIp